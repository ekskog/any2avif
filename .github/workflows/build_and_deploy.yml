name: Build and Deploy Any2AVIF Converter

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/ekskog/any2avif" >> $GITHUB_ENV

      - name: Check if app source code changed
        id: check_changes
        run: |
          # Check if any files outside .github/ and k8s/ changed
          if git diff --name-only HEAD~1 HEAD | grep -vE '^(\.github/|k8s/)' | grep -q .; then
            echo "APP_CHANGED=true" >> $GITHUB_ENV
            echo "✅ App source code changed - will build new image"
          else
            echo "APP_CHANGED=false" >> $GITHUB_ENV
            echo "⚡ Only CI/CD or K8s config changed - will reuse latest available image"
            
            # For simplicity, we'll build anyway for now
            echo "APP_CHANGED=true" >> $GITHUB_ENV
            echo "⚠️  Fallback: Building new image (TODO: implement tag detection)"
          fi

      - name: Set up Docker Buildx
        if: env.APP_CHANGED == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: env.APP_CHANGED == 'true'
        run: echo "${{ secrets.EK_GITHUB_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        if: env.APP_CHANGED == 'true'
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          echo "Building and pushing: $IMAGE_TAG"
          docker buildx build \
            --platform linux/amd64 \
            --tag $IMAGE_TAG \
            --push \
            --progress=plain \
            .
      
      - name: Verify Image Push
        if: env.APP_CHANGED == 'true'
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          echo "Verifying image exists: $IMAGE_TAG"
          docker manifest inspect $IMAGE_TAG
      
      - name: Set Up KUBECONFIG
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          echo "KUBECONFIG=$PWD/kubeconfig.yaml" >> $GITHUB_ENV
          echo "KUBECONFIG set to $PWD/kubeconfig.yaml"
          echo "Kubeconfig file size: $(wc -c < kubeconfig.yaml) bytes"
          if [ ! -s kubeconfig.yaml ]; then
            echo "ERROR: kubeconfig.yaml is empty!"
            exit 1
          fi
                    
      - name: Deploy to Kubernetes
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          if [ "${{ env.APP_CHANGED }}" == "true" ]; then
            echo "🚀 Deploying NEW image: $IMAGE_TAG"
          else
            echo "♻️  Redeploying with existing image: $IMAGE_TAG"
          fi
          
          # Update the deployment YAML with the current image tag
          sed -i "s|image: ghcr.io/ekskog/any2avif:.*|image: $IMAGE_TAG|g" k8s/deployment.yaml
          
          # Apply the deployment to Kubernetes
          kubectl apply -f k8s/deployment.yaml --kubeconfig=kubeconfig.yaml --namespace=webapps
          
          # Wait for rollout to complete
          kubectl rollout status deployment/avif-converter --kubeconfig=kubeconfig.yaml --namespace=webapps --timeout=300s
          
          echo "✅ AVIF Converter deployment completed successfully"
